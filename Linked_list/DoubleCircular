____________________________________CODE___________________________________
___________________________________________________________________________
#include <iostream>
using namespace std;

typedef int BOOL;
#define TRUE 1
#define FALSE 0

typedef struct node
{
	struct node* prev;
	int data;
	struct node* next;
}NODE,*PNODE;

class DoublyCircular_LinkedList
{
  private:
	struct node* head;
	struct node* tail;
  public:
	DoublyCircular_LinkedList();
	~DoublyCircular_LinkedList();
	BOOL InsertFirst(int);       
	void DisplayForward();
	void DisplayBackward();       
	BOOL InsertLast(int);        
	int Count();                 
	int ShowFirstOcc(int);       
	BOOL DeleteFirst();          
	BOOL DeleteLast();           
	BOOL InsertAtPosition(int,int);
	BOOL DeleteAtPosition(int);   
};
DoublyCircular_LinkedList::DoublyCircular_LinkedList()
{
	tail=NULL;
	head=NULL;
}
DoublyCircular_LinkedList::~DoublyCircular_LinkedList()
{
	PNODE temp,navigate;
	if(head!=NULL)
	{
		navigate=head;
		while(navigate!=NULL)
		{
			temp=navigate->next;
			delete navigate;
			navigate=temp;
		}
	}
}
BOOL DoublyCircular_LinkedList::InsertFirst(int value)
{
	    PNODE newnode=NULL;
		newnode=new NODE;
		if(newnode==NULL)
		{
			return FALSE;
		}
		newnode->data=value;
		newnode->next=NULL;
		newnode->prev=NULL;
		if((head==NULL)&&(tail==NULL))
				{
					tail=head=newnode;
					tail->next=head;
					head->prev=tail;
				}
				else
				{
				   newnode->next=(head);
				   head->prev=newnode;
				   head=newnode;
				   tail->next=head;
				   head->prev=tail;
				}
		return TRUE;
}
BOOL DoublyCircular_LinkedList::InsertLast(int value)
{
	PNODE newnode=NULL;
		newnode=new NODE;

		if(newnode==NULL)
			{
				return FALSE;
			}
		newnode->data=value;
		newnode->next=NULL;
		newnode->prev=NULL;
		if((head==NULL)&&(tail==NULL))
		{
		 tail=head=newnode;
		 tail->next=head;
		 head->prev=tail;
		}
		else
		{
			tail->next=newnode;
			newnode->prev=tail;
		    tail=newnode;
			tail->next=head;
		    head->prev=tail;

		}
		return TRUE;
}
void DoublyCircular_LinkedList::DisplayForward()
{
	PNODE temp=head;
	if((head!=NULL)&&(tail!=NULL))
		{
		do
		{
			printf("%d\n",temp->data);
			temp=temp->next;
		}while(temp!=tail->next);
		}
		else
		{
			printf("NODE NOT AVAILABEL");
		}
}
void DoublyCircular_LinkedList::DisplayBackward()
{
	PNODE temp=tail;
		if((head!=NULL)&&(tail!=NULL))
			{
			do
			{
				printf("%d\n",temp->data);
				temp=temp->prev;
			}while(temp!=head->prev);
			}
			else
			{
				printf("NODE NOT AVAILABEL");
			}
}
int DoublyCircular_LinkedList::Count()
{
	PNODE temp=head;
	int cnt=0;
		if((head!=NULL)&&(tail!=NULL))
			{
			do
			{
				cnt++;
				temp=temp->next;
			}while(temp!=tail->next);
			}
			return cnt;
}
int DoublyCircular_LinkedList::ShowFirstOcc(int value)
{
	PNODE temp=head;int cnt=0;
		if((head!=NULL)&&(tail!=NULL))
			{
		   do
			{
				cnt++;
				if(temp->data==value)
				{
					break;
				}
				temp=temp->next;
			}while(temp!=tail->next);
			}
			else
			{
				printf("NODE NOT AVAILABEL");
			}
		return cnt;
}
BOOL DoublyCircular_LinkedList::DeleteFirst()
{
	if((head==NULL)&&(tail==NULL))
		{
			return FALSE;
		}
	else if(head==tail)
		{
			delete head;
			tail=head=NULL;
		}
		else
		{
		  head=head->next;
		  delete head->prev;
		  tail->next=head;
		  head->prev=tail;
		}
		return TRUE;
}
BOOL DoublyCircular_LinkedList::DeleteLast()
{
	    if((head==NULL)&&(tail==NULL))
			{
				return FALSE;
			}
		else if(head==tail)
			{
				delete head;
				tail=head=NULL;
			}
			else
			{
			    tail=tail->prev;
			    delete tail->next;
			    tail->next=head;
			    head->prev=tail;
			}
			return TRUE;
}
BOOL DoublyCircular_LinkedList::InsertAtPosition(int value,int position)
{
	if(position<=0)// if position is negative or zero
		{
			return FALSE;
		}
		else if(position==1)// if entered position is first
		{
			InsertFirst(value);
		}
		else if(position==Count()+1)// if entered position is last
	    {
			InsertLast(value);
		}
		else if(position>Count()+1)
			{
				return FALSE;
			}
		else
		{
			PNODE newnode=NULL;
			newnode=new NODE; // memory allocation for a new node

			if(newnode==NULL)
					{
						return FALSE;
					}
			newnode->data=value;
			newnode->next=newnode->prev=NULL;     // initializing node
			PNODE temp=head;
			while((position-1)!=1)   //position-1 to stop before the actuall position
			{
				temp=temp->next;
				position--;
			}
			newnode->next=temp->next;// sequence matters or data will be lost
			temp->next->prev=newnode;
			(temp->next)=newnode;
			newnode->prev=temp;
		}
		return TRUE;
}
BOOL DoublyCircular_LinkedList::DeleteAtPosition(int position)
{
	    if(position<=0)// if position is negative or zero
		{
			return FALSE;
		}
		else if(position==1)// if entered position is first
		{
			DeleteFirst();
		}
		else if(position==Count())// if entered position is last
	    {
			DeleteLast();
		}
		else if(position>Count()+1)
			{
				return FALSE;
			}
		else
		{
			PNODE temp=head;
			while((position-1)!=1)   //position-1 to stop before the actual position
					{
						temp=temp->next;
						position--;
					}
			temp->next=temp->next->next;
			delete (temp->next->prev);
			temp->next->prev=temp;
		}
		return TRUE;
}
int main()
{
	 DoublyCircular_LinkedList obj;
	 cout<<"------------------------------------------------------"<<endl;
	 cout<<"           ~DOUBLY CIRCULAR LINKED LIST (C++)~"<<endl;
	 cout<<"------------------------------------------------------"<<endl;
	 obj.InsertLast(51);
	 obj.InsertLast(41);
	 obj.InsertLast(31);
	 obj.InsertLast(21);
	 obj.InsertLast(11);
	 cout<<"ELEMENTS SUCCESSFULLY INSERTED"<<endl;
	 cout<<"ELEMENTS OF LINKED LIST:"<<endl;
	 obj.DisplayForward();
	 cout<<"------------------------------------------------------"<<endl;
	 cout<<"ENTERED LINKED LIST IN REVERSE ORDER IS:\n";
	 obj.DisplayBackward();
	 cout<<"------------------------------------------------------"<<endl;
	 obj.InsertFirst(61);
	 cout<<"NEW NODE ENTERED SUCCESSFULLY"<<endl;
     cout<<"UPDATED LINKED LIST:"<<endl;
	 obj.DisplayForward();
	 cout<<"------------------------------------------------------"<<endl;
	 int ret=obj.Count();
	 cout<<"TOTAL NUMBER OF ELEMENTS ARE:"<<ret<<endl;
	 cout<<"------------------------------------------------------"<<endl;
	 ret=obj.ShowFirstOcc(41);
	 cout<<"POSITION OF ENTERED ELEMENT IS:"<<ret<<endl;
	 cout<<"------------------------------------------------------"<<endl;
	ret=obj.DeleteFirst();
	 if(ret==0)
	 	{
	 		cout<<"ELEMENT COULD NOT BE DELETED. LIST UNAVAILABEL\n";
	 	}
	 else
	 	{
	 		cout<<"FIRST ELEMENT DELETED SUCCEFULLY.\n";
	 	}
	 cout<<"UPDATED LINKED LIST:\n";
	 obj.DisplayForward();
	 cout<<"------------------------------------------------------\n";
     ret=obj.DeleteLast();
	 if(ret==0)
	 	{
	 		cout<<"ELEMENT COULD NOT BE DELETED. LIST UNAVAILABEL\n\n";
		}
	 else
	 	{
	 		cout<<"LAST ELEMENT DELETED SUCCESSFULLY\n";
	 	}
	 cout<<"UPDATED LINKED LIST:\n";
	 obj.DisplayForward();
   	 cout<<"------------------------------------------------------\n";
   	 ret=obj.InsertAtPosition(100,2);
   	 if(ret==0)
   		{
   		 	cout<<"INVALID POSITION\n\n";
   		}
   	 else
   		{
   		    cout<<"ELEMENT INSERTED SUCCESSFULLY\n";
   		 }
   	 cout<<"UPDATED LINKED LIST:\n";
   	 obj.DisplayForward();
   	 cout<<"------------------------------------------------------\n";
   	 ret=obj.DeleteAtPosition(2);
   	 if(ret==0)
   	   	{
   	   	 	cout<<"INVALID POSITION\n\n";
   	   	}
   	 else
   	   	{
   	   	   cout<<"ELEMENT INSERTED SUCCESSFULLY\n";
   	    }
   	 cout<<"UPDATED LINKED LIST:\n";
   	 obj.DisplayForward();
   	 cout<<"------------------------------------------------------\n";
	 return 0;
}

